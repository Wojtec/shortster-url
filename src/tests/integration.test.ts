import app from "../app";
import request from "supertest";
import ShortUrl from "../models";
import mongoose from "mongoose";

const url = {
  url: "www.google.com",
  clientShortCode: "A3we4q",
};

beforeAll(async (done) => {
  await ShortUrl.deleteMany({});
  done();
});

afterAll(async (done) => {
  await mongoose.connection.close();
  done();
});

/**
 * Integration tests
 * POST /api/v1/shorturl
 *
 **/
describe("POST /api/v1/shorturl", () => {
  // Test route with url code received from client.
  it("Should return short code generated by script", async (done) => {
    expect.assertions(3);
    const res = await request(app)
      .post("/api/v1/shorturl")
      .set("Accept", "application/json")
      .expect("Content-Type", /json/)
      .send({ url: url.url });
    expect(res.status).toBe(200);
    expect(res.body).toHaveProperty("shortURL");
    expect(res.body).toMatchObject({ shortURL: expect.any(String) });
    done();
  });

  // Test route with url and short code received from client.
  it("Should return a short code that was assigned by the client.", async (done) => {
    expect.assertions(3);
    const res = await request(app)
      .post("/api/v1/shorturl")
      .set("Accept", "application/json")
      .expect("Content-Type", /json/)
      .send(url);
    expect(res.status).toBe(200);
    expect(res.body).toHaveProperty("shortURL");
    expect(res.body).toMatchObject({ shortURL: expect.any(String) });
    done();
  });

  // Test route will check if client short code contains a minimum 4 characters.
  it("Should return response status 400 bad request, short code should have a min 4 characters", async (done) => {
    expect.assertions(2);
    const res = await request(app)
      .post("/api/v1/shorturl")
      .set("Accept", "application/json")
      .expect("Content-Type", /json/)
      .send({ url: url.url, clientShortCode: "aaa" });
    expect(res.status).toBe(400);
    expect(res.body).toMatchObject({
      message: "Short code should have a minimum 4 characters.",
    });
    done();
  });

  // Test route will check if client short code already exists.
  it("Should return response status 400 bad request, short code already exists.", async (done) => {
    expect.assertions(2);
    const res = await request(app)
      .post("/api/v1/shorturl")
      .set("Accept", "application/json")
      .expect("Content-Type", /json/)
      .send(url);
    expect(res.status).toBe(400);
    expect(res.body).toMatchObject({
      message: "This short code is already exists.",
      shortCode: "A3we4q",
    });
    done();
  });

  // Test route will check if client sended URL.
  it("Should return response status 400 bad request, url is required.", async (done) => {
    expect.assertions(2);
    const res = await request(app)
      .post("/api/v1/shorturl")
      .set("Accept", "application/json")
      .expect("Content-Type", /json/)
      .send({ url: null });
    expect(res.status).toBe(400);
    expect(res.body).toMatchObject({
      message: "Url is required",
    });
    done();
  });
});

/**
 *
 * GET /api/v1/:shorturl
 *
 **/
describe("GET /api/v1/:shorturl", () => {
  // Test route with short code received from client.
  it("Should return response status 302 and redirect to long url.", async (done) => {
    expect.assertions(1);
    const res = await request(app)
      .get("/api/v1/" + url.clientShortCode)
      .set("Accept", "application/json");
    expect(res.status).toBe(302);
    done();
  });

  // Test route with short code received from client.
  it("Should return response 404 not found, short url not found.", async (done) => {
    expect.assertions(2);
    const res = await request(app)
      .get("/api/v1/" + "asd")
      .set("Accept", "application/json");
    expect(res.status).toBe(404);
    expect(res.body).toMatchObject({ message: "Short URL not found." });
    done();
  });
});

/**
 *
 * GET /api/v1/:shorturl/stats
 *
 **/
describe("GET /api/v1/:shorturl/stats", () => {
  // Test route with short code received from client and endpoint /stats.
  it("Should return information about short code.", async (done) => {
    expect.assertions(2);
    const res = await request(app)
      .get("/api/v1/" + url.clientShortCode + "/stats")
      .set("Accept", "application/json");
    expect(res.status).toBe(200);
    expect(res.body).toMatchObject({
      registeredDate: expect.any(String),
      lastAccess: expect.any(String),
      timesAccess: expect.any(Number),
    });
    done();
  });

  // Test route with short code received from client and endpoint /stats.
  it("Should return response 404 not found, short url not found.", async (done) => {
    expect.assertions(2);
    const res = await request(app)
      .get("/api/v1/" + "abc" + "/stats")
      .set("Accept", "application/json");
    expect(res.status).toBe(404);
    expect(res.body).toMatchObject({ message: "Short URL not found." });
    done();
  });
});
